import React, { useEffect, useMemo, useState } from "react";
import { motion, AnimatePresence } from "framer-motion";
import { Search, LogIn, LogOut, UserPlus, BookOpen, GraduationCap, LayoutDashboard, Settings, PlusCircle, Trash2, Pencil, ChevronRight, ChevronLeft, Play, FileText, Users, BadgeCheck } from "lucide-react";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Tabs, TabsList, TabsTrigger, TabsContent } from "@/components/ui/tabs";
import { Avatar, AvatarFallback } from "@/components/ui/avatar";
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger, DialogFooter } from "@/components/ui/dialog";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";

// -----------------------------
// Minimal in-memory data + localStorage persistence
// -----------------------------
const LS_KEYS = {
  USER: "unilearn.user",
  COURSES: "unilearn.courses",
  ENROLLMENTS: "unilearn.enrollments",
};

const seedCourses = [
  {
    id: "csc101",
    title: "Introduction to Computer Science",
    code: "CSC 101",
    faculty: "Engineering",
    department: "Computer Science",
    semester: "1",
    level: "100",
    tags: ["programming", "fundamentals"],
    description:
      "Foundations of computing: algorithms, problem solving, and Python basics. Includes weekly labs and quizzes.",
    lessons: [
      { id: "l1", title: "What is an Algorithm?", type: "video", duration: "12:33", url: "https://example.com/algorithms" },
      { id: "l2", title: "Intro to Python", type: "note", duration: "4 pages", url: "https://example.com/python-notes" },
      { id: "l3", title: "Quiz 1: Variables & Types", type: "quiz", duration: "10 mins", quiz: [
        { q: "Which of these is a valid variable name?", options: ["1name", "_name", "class", "var!"], answer: 1 },
        { q: "What does 'int' represent?", options: ["Decimal", "Whole number", "Text", "Boolean"], answer: 1 },
      ]},
    ],
    instructor: { name: "Dr. Ada Okoye" },
  },
  {
    id: "mth201",
    title: "Calculus II",
    code: "MTH 201",
    faculty: "Science",
    department: "Mathematics",
    semester: "2",
    level: "200",
    tags: ["integration", "series"],
    description:
      "Techniques of integration, sequences and series, power series, and applications.",
    lessons: [
      { id: "l1", title: "Integration by Parts", type: "video", duration: "09:41", url: "https://example.com/ibp" },
      { id: "l2", title: "Convergence Tests", type: "note", duration: "7 pages", url: "https://example.com/convergence" },
    ],
    instructor: { name: "Prof. T. Musa" },
  },
  {
    id: "eng105",
    title: "Academic Writing",
    code: "ENG 105",
    faculty: "Arts",
    department: "English",
    semester: "1",
    level: "100",
    tags: ["writing", "research"],
    description: "Essay structure, thesis statements, citation styles, and research methods.",
    lessons: [
      { id: "l1", title: "Thesis Statements", type: "note", duration: "5 pages", url: "https://example.com/thesis" },
      { id: "l2", title: "APA vs MLA", type: "video", duration: "06:05", url: "https://example.com/apa-mla" },
    ],
    instructor: { name: "Dr. N. Eke" },
  },
];

function load(key, fallback) {
  try {
    const raw = localStorage.getItem(key);
    return raw ? JSON.parse(raw) : fallback;
  } catch {
    return fallback;
  }
}

function save(key, value) {
  localStorage.setItem(key, JSON.stringify(value));
}

// -----------------------------
// Helpers
// -----------------------------
const initials = (name) => name.split(" ").map((n) => n[0]).join("").slice(0, 2).toUpperCase();
const isTeacher = (user) => user?.role === "teacher" || user?.role === "admin";
const isAdmin = (user) => user?.role === "admin";

// -----------------------------
// Main App
// -----------------------------
export default function App() {
  const [user, setUser] = useState(null);
  const [courses, setCourses] = useState(seedCourses);
  const [enrollments, setEnrollments] = useState({}); // userId -> [courseIds]
  const [view, setView] = useState({ page: "home", courseId: null });
  const [query, setQuery] = useState("");
  const [filters, setFilters] = useState({ faculty: "all", level: "all", semester: "all" });

  // Load from localStorage
  useEffect(() => {
    const u = load(LS_KEYS.USER, null);
    const c = load(LS_KEYS.COURSES, seedCourses);
    const e = load(LS_KEYS.ENROLLMENTS, {});
    setUser(u);
    setCourses(c);
    setEnrollments(e);
  }, []);

  // Persist
  useEffect(() => save(LS_KEYS.USER, user), [user]);
  useEffect(() => save(LS_KEYS.COURSES, courses), [courses]);
  useEffect(() => save(LS_KEYS.ENROLLMENTS, enrollments), [enrollments]);

  const myEnrollments = useMemo(() => {
    if (!user) return [];
    return enrollments[user.email] || [];
  }, [user, enrollments]);

  const filteredCourses = useMemo(() => {
    const q = query.trim().toLowerCase();
    return courses.filter((c) => {
      const matchesQuery = !q ||
        c.title.toLowerCase().includes(q) ||
        c.code.toLowerCase().includes(q) ||
        c.tags.join(" ").toLowerCase().includes(q) ||
        c.instructor.name.toLowerCase().includes(q);
      const byFaculty = filters.faculty === "all" || c.faculty === filters.faculty;
      const byLevel = filters.level === "all" || c.level === filters.level;
      const bySem = filters.semester === "all" || c.semester === filters.semester;
      return matchesQuery && byFaculty && byLevel && bySem;
    });
  }, [courses, query, filters]);

  // Actions
  const login = (payload) => setUser(payload);
  const logout = () => setUser(null);

  const enroll = (courseId) => {
    if (!user) return;
    setEnrollments((prev) => {
      const cur = prev[user.email] || [];
      if (cur.includes(courseId)) return prev;
      return { ...prev, [user.email]: [...cur, courseId] };
    });
  };
  const unenroll = (courseId) => {
    if (!user) return;
    setEnrollments((prev) => {
      const cur = prev[user.email] || [];
      return { ...prev, [user.email]: cur.filter((id) => id !== courseId) };
    });
  };

  const upsertCourse = (course) => {
    setCourses((prev) => {
      const idx = prev.findIndex((c) => c.id === course.id);
      if (idx === -1) return [course, ...prev];
      const clone = [...prev];
      clone[idx] = course;
      return clone;
    });
  };

  const deleteCourse = (id) => setCourses((prev) => prev.filter((c) => c.id !== id));

  // UI
  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-50 to-slate-100 text-slate-800">
      <TopNav user={user} onLogout={logout} onGo={(page) => setView({ page, courseId: null })} />

      <main className="container mx-auto px-4 py-6">
        <AnimatePresence mode="wait">
          {view.page === "home" && (
            <motion.div key="home" initial={{ opacity: 0, y: 8 }} animate={{ opacity: 1, y: 0 }} exit={{ opacity: 0, y: -8 }}>
              <Hero onExplore={() => setView({ page: "courses" })} />
              <div className="mt-6 grid gap-4 md:grid-cols-2">
                <QuickStats myEnrollments={myEnrollments} courses={courses} />
                <GettingStartedCard />
              </div>
            </motion.div>
          )}

          {view.page === "courses" && (
            <motion.div key="courses" initial={{ opacity: 0, y: 8 }} animate={{ opacity: 1, y: 0 }} exit={{ opacity: 0, y: -8 }}>
              <CoursesIndex
                user={user}
                courses={filteredCourses}
                rawCourses={courses}
                query={query}
                setQuery={setQuery}
                filters={filters}
                setFilters={setFilters}
                myEnrollments={myEnrollments}
                onOpen={(id) => setView({ page: "course", courseId: id })}
                onEnroll={enroll}
                onUnenroll={unenroll}
                onCreate={() => setView({ page: "dashboard" })}
              />
            </motion.div>
          )}

          {view.page === "course" && (
            <motion.div key="course" initial={{ opacity: 0, y: 8 }} animate={{ opacity: 1, y: 0 }} exit={{ opacity: 0, y: -8 }}>
              <CourseDetail
                course={courses.find((c) => c.id === view.courseId)}
                isEnrolled={!!user && myEnrollments.includes(view.courseId)}
                onBack={() => setView({ page: "courses" })}
                onEnroll={enroll}
                onUnenroll={unenroll}
              />
            </motion.div>
          )}

          {view.page === "auth" && (
            <motion.div key="auth" initial={{ opacity: 0, y: 8 }} animate={{ opacity: 1, y: 0 }} exit={{ opacity: 0, y: -8 }}>
              <Auth onSuccess={(u) => { login(u); setView({ page: "home" }); }} />
            </motion.div>
          )}

          {view.page === "dashboard" && (
            <motion.div key="dash" initial={{ opacity: 0, y: 8 }} animate={{ opacity: 1, y: 0 }} exit={{ opacity: 0, y: -8 }}>
              <TeacherDashboard
                user={user}
                courses={courses}
                onBack={() => setView({ page: "courses" })}
                onSave={(c) => upsertCourse(c)}
                onDelete={(id) => deleteCourse(id)}
                onOpen={(id) => setView({ page: "course", courseId: id })}
                requireAuth={() => setView({ page: "auth" })}
              />
            </motion.div>
          )}
        </AnimatePresence>
      </main>

      <Footer />
    </div>
  );
}

function TopNav({ user, onLogout, onGo }) {
  return (
    <header className="border-b bg-white/70 backdrop-blur supports-[backdrop-filter]:bg-white/50 sticky top-0 z-50">
      <div className="container mx-auto px-4 py-3 flex items-center gap-3">
        <GraduationCap className="h-6 w-6" />
        <span className="font-semibold text-lg">UniLearn</span>
        <nav className="ml-6 hidden md:flex items-center gap-4 text-sm">
          <Button variant="ghost" onClick={() => onGo("home")}>Home</Button>
          <Button variant="ghost" onClick={() => onGo("courses")}>Courses</Button>
          <Button variant="ghost" onClick={() => onGo("dashboard")}><LayoutDashboard className="mr-1 h-4 w-4"/>Dashboard</Button>
        </nav>
        <div className="ml-auto flex items-center gap-3">
          {user ? (
            <div className="flex items-center gap-3">
              <Badge variant="secondary" className="hidden sm:inline-flex">{user.role}</Badge>
              <Avatar className="h-8 w-8">
                <AvatarFallback>{initials(user.name)}</AvatarFallback>
              </Avatar>
              <span className="text-sm hidden sm:inline">{user.name}</span>
              <Button size="sm" variant="outline" onClick={onLogout}><LogOut className="mr-1 h-4 w-4"/>Logout</Button>
            </div>
          ) : (
            <div className="flex items-center gap-2">
              <Button size="sm" variant="outline" onClick={() => onGo("auth")}><LogIn className="mr-1 h-4 w-4"/>Login</Button>
              <Button size="sm" onClick={() => onGo("auth")}><UserPlus className="mr-1 h-4 w-4"/>Sign Up</Button>
            </div>
          )}
        </div>
      </div>
    </header>
  );
}

function Hero({ onExplore }) {
  return (
    <Card className="bg-white/70">
      <CardHeader>
        <CardTitle className="text-2xl">Learn faster. Teach smarter.</CardTitle>
        <CardDescription>Browse courses, watch lessons, take quizzes, and manage content — all in one place.</CardDescription>
      </CardHeader>
      <CardContent>
        <div className="flex flex-wrap items-center gap-3">
          <Button onClick={onExplore}><BookOpen className="mr-1 h-4 w-4"/>Explore Courses</Button>
          <Button variant="outline"><BadgeCheck className="mr-1 h-4 w-4"/>Earn Certificates (demo)</Button>
        </div>
      </CardContent>
    </Card>
  );
}

function QuickStats({ myEnrollments, courses }) {
  return (
    <Card>
      <CardHeader>
        <CardTitle className="text-lg">Your quick stats</CardTitle>
        <CardDescription>Snapshot of your learning</CardDescription>
      </CardHeader>
      <CardContent className="grid grid-cols-3 gap-3">
        <Stat label="Enrolled" value={myEnrollments.length} />
        <Stat label="Courses" value={courses.length} />
        <Stat label="Completed" value={0} />
      </CardContent>
    </Card>
  );
}

function Stat({ label, value }) {
  return (
    <div className="rounded-2xl border p-4 text-center bg-white">
      <div className="text-2xl font-semibold">{value}</div>
      <div className="text-xs text-slate-500">{label}</div>
    </div>
  );
}

function GettingStartedCard() {
  return (
    <Card>
      <CardHeader>
        <CardTitle className="text-lg">Getting started</CardTitle>
        <CardDescription>Three simple steps</CardDescription>
      </CardHeader>
      <CardContent>
        <ol className="list-decimal pl-5 space-y-2 text-sm">
          <li>Search and enroll in a course.</li>
          <li>Open the course to watch lessons and read notes.</li>
          <li>Take quizzes to test your knowledge.</li>
        </ol>
      </CardContent>
    </Card>
  );
}

function CoursesIndex({ user, courses, rawCourses, query, setQuery, filters, setFilters, myEnrollments, onOpen, onEnroll, onUnenroll, onCreate }) {
  const faculties = Array.from(new Set(rawCourses.map(c => c.faculty)));
  const levels = Array.from(new Set(rawCourses.map(c => c.level)));
  const semesters = Array.from(new Set(rawCourses.map(c => c.semester)));
  return (
    <div className="space-y-4">
      <div className="flex flex-col md:flex-row gap-3 md:items-center">
        <div className="relative w-full md:max-w-md">
          <Search className="absolute left-2 top-1/2 -translate-y-1/2 h-4 w-4" />
          <Input className="pl-8" placeholder="Search courses, codes, tags, instructor..." value={query} onChange={(e) => setQuery(e.target.value)} />
        </div>
        <div className="flex gap-2 flex-wrap">
          <Select value={filters.faculty} onValueChange={(v) => setFilters((f) => ({ ...f, faculty: v }))}>
            <SelectTrigger className="w-[150px]"><SelectValue placeholder="Faculty"/></SelectTrigger>
            <SelectContent>
              <SelectItem value="all">All Faculties</SelectItem>
              {faculties.map((f) => (<SelectItem key={f} value={f}>{f}</SelectItem>))}
            </SelectContent>
          </Select>
          <Select value={filters.level} onValueChange={(v) => setFilters((f) => ({ ...f, level: v }))}>
            <SelectTrigger className="w-[120px]"><SelectValue placeholder="Level"/></SelectTrigger>
            <SelectContent>
              <SelectItem value="all">All Levels</SelectItem>
              {levels.map((l) => (<SelectItem key={l} value={l}>{l}</SelectItem>))}
            </SelectContent>
          </Select>
          <Select value={filters.semester} onValueChange={(v) => setFilters((f) => ({ ...f, semester: v }))}>
            <SelectTrigger className="w-[140px]"><SelectValue placeholder="Semester"/></SelectTrigger>
            <SelectContent>
              <SelectItem value="all">All Semesters</SelectItem>
              {semesters.map((s) => (<SelectItem key={s} value={s}>{s}</SelectItem>))}
            </SelectContent>
          </Select>
          {isTeacher(user) && (
            <Button onClick={onCreate}><PlusCircle className="mr-1 h-4 w-4"/>New Course</Button>
          )}
        </div>
      </div>

      <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-3">
        {courses.map((c) => (
          <Card key={c.id} className="overflow-hidden">
            <CardHeader className="pb-2">
              <CardTitle className="text-lg flex items-center justify-between">
                <span>{c.title}</span>
                <Badge variant="secondary">{c.code}</Badge>
              </CardTitle>
              <CardDescription className="text-xs">{c.faculty} • {c.department} • Level {c.level} • Sem {c.semester}</CardDescription>
            </CardHeader>
            <CardContent className="space-y-3">
              <p className="text-sm line-clamp-2">{c.description}</p>
              <div className="flex gap-2 flex-wrap">
                {c.tags.map((t) => <Badge key={t} variant="outline">{t}</Badge>)}
              </div>
              <div className="flex items-center justify-between pt-2">
                <Button variant="outline" onClick={() => onOpen(c.id)}><ChevronRight className="mr-1 h-4 w-4"/>Open</Button>
                {myEnrollments.includes(c.id) ? (
                  <Button variant="destructive" onClick={() => onUnenroll(c.id)}>Unenroll</Button>
                ) : (
                  <Button onClick={() => onEnroll(c.id)}>Enroll</Button>
                )}
              </div>
            </CardContent>
          </Card>
        ))}
      </div>
    </div>
  );
}

function CourseDetail({ course, isEnrolled, onBack, onEnroll, onUnenroll }) {
  const [activeTab, setActiveTab] = useState("content");
  const [quizState, setQuizState] = useState({}); // lessonId -> { selectedIndex, submitted, correct }

  if (!course) return (
    <Card>
      <CardContent className="p-6">
        <p>Course not found.</p>
        <Button className="mt-3" onClick={onBack}><ChevronLeft className="mr-1 h-4 w-4"/>Back</Button>
      </CardContent>
    </Card>
  );

  const handleQuizAnswer = (lessonId, idx, correctIndex) => {
    setQuizState((prev) => ({
      ...prev,
      [lessonId]: { selectedIndex: idx, submitted: true, correct: idx === correctIndex },
    }));
  };

  return (
    <Card>
      <CardHeader>
        <div className="flex items-start justify-between gap-3">
          <div>
            <CardTitle className="text-xl">{course.title}</CardTitle>
            <CardDescription>{course.code} • {course.faculty} • {course.department}</CardDescription>
          </div>
          <div className="flex gap-2">
            <Button variant="outline" onClick={onBack}><ChevronLeft className="mr-1 h-4 w-4"/>Back</Button>
            {isEnrolled ? (
              <Button variant="destructive" onClick={() => onUnenroll(course.id)}>Unenroll</Button>
            ) : (
              <Button onClick={() => onEnroll(course.id)}>Enroll</Button>
            )}
          </div>
        </div>
      </CardHeader>
      <CardContent>
        <Tabs value={activeTab} onValueChange={setActiveTab}>
          <TabsList className="grid grid-cols-3 w-full">
            <TabsTrigger value="content">Content</TabsTrigger>
            <TabsTrigger value="about">About</TabsTrigger>
            <TabsTrigger value="people">People</TabsTrigger>
          </TabsList>
          <TabsContent value="content" className="space-y-3 mt-3">
            {course.lessons.map((l) => (
              <div key={l.id} className="rounded-2xl border p-4 bg-white">
                <div className="flex items-center justify-between">
                  <div className="flex items-center gap-2">
                    {l.type === "video" && <Play className="h-4 w-4"/>}
                    {l.type === "note" && <FileText className="h-4 w-4"/>}
                    {l.type === "quiz" && <BadgeCheck className="h-4 w-4"/>}
                    <span className="font-medium">{l.title}</span>
                    <Badge variant="outline" className="ml-2">{l.duration}</Badge>
                  </div>
                  {l.url && (<a href={l.url} target="_blank" rel="noreferrer" className="text-sm underline">Open resource</a>)}
                </div>
                {l.type === "quiz" && (
                  <div className="mt-3 space-y-3">
                    {l.quiz?.map((q, qi) => (
                      <div key={qi} className="text-sm">
                        <p className="font-medium">{qi + 1}. {q.q}</p>
                        <div className="grid sm:grid-cols-2 gap-2 mt-2">
                          {q.options.map((opt, oi) => (
                            <Button key={oi}
                              variant={quizState[l.id]?.submitted ? (oi === q.answer ? "default" : (quizState[l.id]?.selectedIndex === oi ? "destructive" : "outline")) : "outline"}
                              onClick={() => handleQuizAnswer(l.id, oi, q.answer)}
                            >{opt}</Button>
                          ))}
                        </div>
                        {quizState[l.id]?.submitted && (
                          <p className={`mt-2 ${quizState[l.id].correct ? 'text-green-600' : 'text-red-600'}`}>
                            {quizState[l.id].correct ? 'Correct! 🎉' : 'Not quite—try reviewing the lesson.'}
                          </p>
                        )}
                      </div>
                    ))}
                  </div>
                )}
              </div>
            ))}
          </TabsContent>
          <TabsContent value="about" className="mt-3 text-sm">
            <p>{course.description}</p>
            <div className="mt-3 flex gap-2 flex-wrap">
              {course.tags.map(t => <Badge key={t} variant="secondary">{t}</Badge>)}
            </div>
          </TabsContent>
          <TabsContent value="people" className="mt-3">
            <div className="flex items-center gap-3">
              <Avatar><AvatarFallback>{initials(course.instructor.name)}</AvatarFallback></Avatar>
              <div>
                <div className="font-medium">{course.instructor.name}</div>
                <div className="text-xs text-slate-500">Instructor</div>
              </div>
            </div>
          </TabsContent>
        </Tabs>
      </CardContent>
    </Card>
  );
}

function Auth({ onSuccess }) {
  const [isLogin, setIsLogin] = useState(true);
  const [name, setName] = useState("");
  const [email, setEmail] = useState("");
  const [role, setRole] = useState("student");

  const submit = (e) => {
    e.preventDefault();
    if (!email) return;
    const payload = isLogin ? { name: name || "Student", email, role } : { name, email, role };
    onSuccess(payload);
  };

  return (
    <Card className="max-w-lg mx-auto">
      <CardHeader>
        <CardTitle className="text-xl flex items-center gap-2">{isLogin ? "Welcome back" : "Create your account"}</CardTitle>
        <CardDescription>Use a demo email—this is a local prototype (no real auth).</CardDescription>
      </CardHeader>
      <CardContent>
        <form onSubmit={submit} className="space-y-3">
          {!isLogin && (
            <div>
              <label className="text-sm">Full name</label>
              <Input value={name} onChange={(e) => setName(e.target.value)} placeholder="e.g. Chinedu Okafor" />
            </div>
          )}
          <div>
            <label className="text-sm">Email</label>
            <Input type="email" value={email} onChange={(e) => setEmail(e.target.value)} placeholder="you@school.edu" />
          </div>
          <div>
            <label className="text-sm">Role</label>
            <Select value={role} onValueChange={setRole}>
              <SelectTrigger><SelectValue placeholder="Select role"/></SelectTrigger>
              <SelectContent>
                <SelectItem value="student">Student</SelectItem>
                <SelectItem value="teacher">Teacher</SelectItem>
                <SelectItem value="admin">Admin</SelectItem>
              </SelectContent>
            </Select>
          </div>
          <div className="flex items-center justify-between pt-2">
            <Button type="submit">{isLogin ? "Continue" : "Create account"}</Button>
            <Button type="button" variant="ghost" onClick={() => setIsLogin((v) => !v)}>
              {isLogin ? "New here? Sign up" : "Have an account? Log in"}
            </Button>
          </div>
        </form>
      </CardContent>
    </Card>
  );
}

function TeacherDashboard({ user, courses, onBack, onSave, onDelete, onOpen, requireAuth }) {
  const [editing, setEditing] = useState(null);
  const [draft, setDraft] = useState({ id: "", title: "", code: "", faculty: "", department: "", level: "100", semester: "1", tags: [], description: "", lessons: [], instructor: { name: "" } });
  const [showDelete, setShowDelete] = useState(null);

  useEffect(() => {
    if (editing) setDraft(editing);
  }, [editing]);

  if (!user) {
    return (
      <Card>
        <CardContent className="p-6">
          <p className="mb-3">You need to be logged in as a teacher/admin to manage courses.</p>
          <Button onClick={requireAuth}><LogIn className="mr-1 h-4 w-4"/>Login</Button>
        </CardContent>
      </Card>
    );
  }
  if (!isTeacher(user)) {
    return (
      <Card>
        <CardContent className="p-6">
          <p className="mb-3">Your role <Badge variant="secondary">{user.role}</Badge> does not have access to the dashboard.</p>
          <Button variant="outline" onClick={onBack}><ChevronLeft className="mr-1 h-4 w-4"/>Back</Button>
        </CardContent>
      </Card>
    );
  }

  const resetDraft = () => setDraft({ id: "", title: "", code: "", faculty: "", department: "", level: "100", semester: "1", tags: [], description: "", lessons: [], instructor: { name: "" } });

  const saveDraft = () => {
    if (!draft.id || !draft.title || !draft.code) return;
    onSave({ ...draft, tags: (draft.tags || []).map(t => t.trim()).filter(Boolean) });
    setEditing(null);
    resetDraft();
  };

  const addLesson = () => {
    const id = `l${Math.random().toString(36).slice(2, 7)}`;
    setDraft((d) => ({ ...d, lessons: [...(d.lessons || []), { id, title: "New lesson", type: "note", duration: "", url: "" }] }));
  };

  const updateLesson = (id, patch) => {
    setDraft((d) => ({ ...d, lessons: d.lessons.map((l) => l.id === id ? { ...l, ...patch } : l) }));
  };

  const removeLesson = (id) => setDraft((d) => ({ ...d, lessons: d.lessons.filter((l) => l.id !== id) }));

  return (
    <div className="grid gap-4 lg:grid-cols-2">
      <Card>
        <CardHeader>
          <CardTitle className="text-lg flex items-center justify-between">
            <span>Manage courses</span>
            <Button variant="outline" onClick={onBack}><ChevronLeft className="mr-1 h-4 w-4"/>Back</Button>
          </CardTitle>
          <CardDescription>Create, edit, and delete courses.</CardDescription>
        </CardHeader>
        <CardContent className="space-y-3">
          <div className="flex justify-between items-center">
            <Button onClick={() => { setEditing(null); resetDraft(); }}><PlusCircle className="mr-1 h-4 w-4"/>New Course</Button>
            <span className="text-xs text-slate-500">Logged in as {user.name} ({user.role})</span>
          </div>
          <div className="space-y-2 max-h-[420px] overflow-auto pr-1">
            {courses.map((c) => (
              <div key={c.id} className="rounded-2xl border p-3 bg-white flex items-center justify-between gap-2">
                <div>
                  <div className="font-medium">{c.title} <span className="text-xs text-slate-500">• {c.code}</span></div>
                  <div className="text-xs text-slate-500">{c.faculty} • {c.department} • L{c.level} • S{c.semester}</div>
                </div>
                <div className="flex gap-2">
                  <Button size="sm" variant="outline" onClick={() => setEditing(c)}><Pencil className="mr-1 h-4 w-4"/>Edit</Button>
                  <Button size="sm" variant="destructive" onClick={() => setShowDelete(c)}><Trash2 className="mr-1 h-4 w-4"/>Delete</Button>
                  <Button size="sm" onClick={() => onOpen(c.id)}><ChevronRight className="mr-1 h-4 w-4"/>Open</Button>
                </div>
              </div>
            ))}
          </div>
        </CardContent>
      </Card>

      <Card>
        <CardHeader>
          <CardTitle className="text-lg flex items-center gap-2"><Settings className="h-4 w-4"/>Course editor</CardTitle>
          <CardDescription>Fill in required fields (ID, Title, Code).</CardDescription>
        </CardHeader>
        <CardContent className="space-y-3">
          <div className="grid grid-cols-2 gap-2">
            <div>
              <label className="text-xs">Course ID</label>
              <Input value={draft.id} onChange={(e) => setDraft({ ...draft, id: e.target.value })} placeholder="e.g. phy102" />
            </div>
            <div>
              <label className="text-xs">Course Code</label>
              <Input value={draft.code} onChange={(e) => setDraft({ ...draft, code: e.target.value })} placeholder="e.g. PHY 102" />
            </div>
          </div>
          <div>
            <label className="text-xs">Title</label>
            <Input value={draft.title} onChange={(e) => setDraft({ ...draft, title: e.target.value })} placeholder="Course title" />
          </div>
          <div className="grid grid-cols-2 gap-2">
            <div>
              <label className="text-xs">Faculty</label>
              <Input value={draft.faculty} onChange={(e) => setDraft({ ...draft, faculty: e.target.value })} placeholder="e.g. Science" />
            </div>
            <div>
              <label className="text-xs">Department</label>
              <Input value={draft.department} onChange={(e) => setDraft({ ...draft, department: e.target.value })} placeholder="e.g. Physics" />
            </div>
          </div>
          <div className="grid grid-cols-2 gap-2">
            <div>
              <label className="text-xs">Level</label>
              <Select value={draft.level} onValueChange={(v) => setDraft({ ...draft, level: v })}>
                <SelectTrigger><SelectValue /></SelectTrigger>
                <SelectContent>
                  {["100","200","300","400","500"].map(l => <SelectItem key={l} value={l}>{l}</SelectItem>)}
                </SelectContent>
              </Select>
            </div>
            <div>
              <label className="text-xs">Semester</label>
              <Select value={draft.semester} onValueChange={(v) => setDraft({ ...draft, semester: v })}>
                <SelectTrigger><SelectValue /></SelectTrigger>
                <SelectContent>
                  {["1","2","3"].map(s => <SelectItem key={s} value={s}>{s}</SelectItem>)}
                </SelectContent>
              </Select>
            </div>
          </div>
          <div>
            <label className="text-xs">Instructor Name</label>
            <Input value={draft.instructor?.name || ""} onChange={(e) => setDraft({ ...draft, instructor: { name: e.target.value } })} placeholder="e.g. Dr. Jane Doe" />
          </div>
          <div>
            <label className="text-xs">Tags (comma separated)</label>
            <Input value={(draft.tags || []).join(", ")} onChange={(e) => setDraft({ ...draft, tags: e.target.value.split(",") })} placeholder="e.g. optics, electromagnetism" />
          </div>
          <div>
            <label className="text-xs">Description</label>
            <Textarea value={draft.description} onChange={(e) => setDraft({ ...draft, description: e.target.value })} placeholder="Describe the course" />
          </div>

          <div className="mt-2">
            <div className="flex items-center justify-between mb-2">
              <div className="font-medium text-sm">Lessons</div>
              <Button size="sm" variant="outline" onClick={addLesson}><PlusCircle className="mr-1 h-4 w-4"/>Add lesson</Button>
            </div>
            <div className="space-y-2 max-h-[220px] overflow-auto pr-1">
              {(draft.lessons || []).map((l) => (
                <div key={l.id} className="rounded-2xl border p-3 bg-white grid grid-cols-1 md:grid-cols-5 gap-2 items-center">
                  <Input className="md:col-span-2" value={l.title} onChange={(e) => updateLesson(l.id, { title: e.target.value })} placeholder="Lesson title" />
                  <Select value={l.type} onValueChange={(v) => updateLesson(l.id, { type: v })}>
                    <SelectTrigger><SelectValue /></SelectTrigger>
                    <SelectContent>
                      <SelectItem value="video">Video</SelectItem>
                      <SelectItem value="note">Note</SelectItem>
                      <SelectItem value="quiz">Quiz</SelectItem>
                    </SelectContent>
                  </Select>
                  <Input value={l.duration} onChange={(e) => updateLesson(l.id, { duration: e.target.value })} placeholder="Duration / pages" />
                  <div className="flex items-center gap-2">
                    <Input value={l.url || ""} onChange={(e) => updateLesson(l.id, { url: e.target.value })} placeholder="Resource URL (optional)" />
                    <Button variant="destructive" size="icon" onClick={() => removeLesson(l.id)}><Trash2 className="h-4 w-4"/></Button>
                  </div>
                </div>
              ))}
            </div>
          </div>

          <div className="flex items-center justify-between pt-2">
            <Button onClick={saveDraft}><BadgeCheck className="mr-1 h-4 w-4"/>Save</Button>
            <Button variant="outline" onClick={() => { setEditing(null); resetDraft(); }}>Reset</Button>
          </div>
        </CardContent>
      </Card>

      <Dialog open={!!showDelete} onOpenChange={() => setShowDelete(null)}>
        <DialogContent>
          <DialogHeader>
            <DialogTitle>Delete course "{showDelete?.title}"?</DialogTitle>
          </DialogHeader>
          <p className="text-sm text-slate-600">This action cannot be undone.</p>
          <DialogFooter className="mt-3">
            <Button variant="outline" onClick={() => setShowDelete(null)}>Cancel</Button>
            <Button variant="destructive" onClick={() => { onDelete(showDelete.id); setShowDelete(null); }}>Delete</Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>
    </div>
  );
}

function Footer() {
  return (
    <footer className="mt-8 border-t">
      <div className="container mx-auto px-4 py-6 text-xs text-slate-500 flex flex-wrap items-center justify-between gap-2">
        <div className="flex items-center gap-2"><Users className="h-4 w-4"/> UniLearn Prototype</div>
        <div>© {new Date().getFullYear()} UniLearn • Built with React, Tailwind, shadcn/ui</div>
      </div>
    </footer>
  );
}
